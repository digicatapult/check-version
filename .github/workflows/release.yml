name: Release

on:
  push:
    branches: ['main']

jobs:
  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Lint
        run: npm run lint

  dependency-check:
    name: Run dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Dependency Check
        run: npm run depcheck

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: npm ci
      - name: Build OpenAPI
        run: npm run build
      - name: Run tests
        run: npm run test

  check-version:
    name: 'Check version'
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.is_new_version }}
      version: ${{ steps.get_version.outputs.version }}
      build_date: ${{ steps.get_version.outputs.build_date }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run my action
        id: get_version
        uses: ./
        with:
          npm_package_location: './'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Skipping release as version has not increased
        if: steps.get_version.outputs.is_new_version != 'true'
        shell: bash
        run: |
          echo "Skipping release as current version has already been published"

  publish:
    name: 'Publish package'
    needs: [lint, dependency-check, tests, check-version]
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: npm ci
      - run:
          npm run build
          # Build github release
      - name: Build release version
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: ${{ needs.check-version.outputs.version }}
          prerelease: false
          title: Release ${{ needs.check-version.outputs.version }}
      - uses: JasonEtco/build-and-tag-action@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ needs.check-version.outputs.version }}
